package quizmanagementsystem.GUI;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;


import quizmanagementsystem.BUS.ClassBUS;
import quizmanagementsystem.BUS.UserBUS;
import quizmanagementsystem.DTO.ClassDTO;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentEvent;
import java.util.List;
import java.util.Vector;

public class ClassListFrame {
    private int userID;
    private JTextField searchText;
    private JTable classTable;
    private DefaultTableModel tableModel;

    public ClassListFrame(int userID) {
        this.userID = userID;

        // Frame
        JFrame f = new JFrame("Quiz Management System");
        f.setSize(800, 600);
        f.setLayout(null);
        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f.setLocationRelativeTo(null);

        // ========================== 1Ô∏è‚É£ Thanh hi·ªÉn th·ªã User ==========================
        JPanel userpanel = new JPanel();
        userpanel.setBackground(Color.decode("#C3F5FF"));
        userpanel.setBounds(0, 0, 800, 50);
        userpanel.setLayout(null);

        // L·∫•y t√™n h·ªçc sinh t·ª´ userID
        String studentName = UserBUS.getUserName(userID);

        

        // Label hi·ªÉn th·ªã t√™n ng∆∞·ªùi d√πng
        JLabel userlabel = new JLabel(studentName);
        userlabel.setBounds(600, 11, 300, 30);
        userlabel.setFont(new Font("Arial", Font.BOLD, 17));
        userlabel.setForeground(Color.WHITE);
        userpanel.add(userlabel);

         //Label back
         JLabel backlabel = new JLabel();
         backlabel.setBounds(10, 11, 20, 30);

         ImageIcon backsign = new ImageIcon("quizmanagementsystem/src/main/resources/img/back.png");
         Image imgbacksign = backsign.getImage().getScaledInstance(25, 20, Image.SCALE_SMOOTH);
         ImageIcon resizedbacksign = new ImageIcon(imgbacksign);
         backlabel.setIcon(resizedbacksign);
         userpanel.add(backlabel);

        // Label t√™n m√†n h√¨nh
        JLabel mainlabel = new JLabel("Danh s√°ch l·ªõp");
        mainlabel.setBounds(30, 11, 200, 30);
        mainlabel.setForeground(Color.WHITE);
        mainlabel.setFont(new Font("Arial", Font.BOLD, 17));
        userpanel.add(mainlabel);

        // Label user
        JLabel user = new JLabel();
        user.setBounds(730, 11, 30, 30);

        ImageIcon usersign = new ImageIcon("quizmanagementsystem/src/main/resources/img/user.png");
        Image imguser = usersign.getImage().getScaledInstance(30, 30, Image.SCALE_SMOOTH);
        user.setIcon(new ImageIcon(imguser));
        userpanel.add(user);



        // ==========================B·ªô l·ªçc - T√¨m ki·∫øm - Button
        // ==========================
        JPanel filterPanel = new JPanel();
        filterPanel.setBounds(0, 50, 800, 70);
        filterPanel.setLayout(null);

        // Button Th√™m
        JButton addButton = new JButton("Th√™m");
        addButton.setBounds(20, 20, 70, 25);
        addButton.setBackground(Color.decode("#9EFFD7"));
        filterPanel.add(addButton);

        // ==========================Action th√™m============================================
        addButton.addActionListener(e -> {
            // Sinh m√£ l·ªõp t·ª± ƒë·ªông
            String generatedClassID = ClassBUS.generateClassCode();

            // T·∫°o JPanel ch·ª©a form nh·∫≠p th√¥ng tin l·ªõp m·ªõi
            JPanel addPanel = new JPanel(new GridLayout(2, 2, 5, 5));
            addPanel.setBorder(BorderFactory.createTitledBorder("Th√™m l·ªõp"));

            JLabel classCodeLabel = new JLabel("M√£ l·ªõp:");
            JTextField classCodeField = new JTextField(generatedClassID);
            classCodeField.setEditable(false);

            JLabel classNameLabel = new JLabel("T√™n l·ªõp:");
            JTextField classNameField = new JTextField();

            addPanel.add(classCodeLabel);
            addPanel.add(classCodeField);
            addPanel.add(classNameLabel);
            addPanel.add(classNameField);

            // Hi·ªÉn th·ªã Dialog nh·∫≠p th√¥ng tin
            int result = JOptionPane.showConfirmDialog(null, addPanel, "Th√™m l·ªõp",
                    JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

            if (result == JOptionPane.OK_OPTION) {
                String className = classNameField.getText().trim();

                if (!className.isEmpty()) {
                    // G·ªçi BUS ƒë·ªÉ th√™m l·ªõp
                    boolean isInserted = ClassBUS.addClass(className, userID);
                    if (isInserted) {
                        JOptionPane.showMessageDialog(null, "Th√™m l·ªõp th√†nh c√¥ng!", "Th√¥ng b√°o",
                                JOptionPane.INFORMATION_MESSAGE);
                        loadClassData(); // üî• C·∫≠p nh·∫≠t l·∫°i b·∫£ng sau khi th√™m
                    } else {
                        JOptionPane.showMessageDialog(null, "L·ªói khi th√™m l·ªõp!", "L·ªói", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "T√™n l·ªõp kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "L·ªói",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });

        // Button X√≥a
        JButton deleteButton = new JButton("X√≥a");
        deleteButton.setBounds(100, 20, 60, 25);
        deleteButton.setBackground(Color.decode("#FF9EB5"));
        filterPanel.add(deleteButton);

        // Button S·ª≠a
        JButton updateButton = new JButton("S·ª≠a");
        updateButton.setBounds(170, 20, 60, 25);
        updateButton.setBackground(Color.decode("#5440FF"));
        filterPanel.add(updateButton);

        // Label T√¨m ki·∫øm
        JLabel searchLabel = new JLabel("T√¨m ki·∫øm");
        searchLabel.setBounds(260, 20, 80, 30);
        searchLabel.setFont(new Font("Arial", Font.BOLD, 15));
        filterPanel.add(searchLabel);

        // TextField T√¨m ki·∫øm
        searchText = new JTextField();
        searchText.setBounds(350, 20, 300, 30);
        searchText.setForeground(Color.GRAY);
        filterPanel.add(searchText);


        // Label icon S·∫Øp x·∫øp
        JLabel arrangeLabel = new JLabel();
        arrangeLabel.setBounds(670, 20, 50, 30);
        ImageIcon arrangeIcon = new ImageIcon("quizmanagementsystem/src/main/resources/img/arrows.png");
        Image imgArrange = arrangeIcon.getImage().getScaledInstance(25, 25, Image.SCALE_SMOOTH);
        arrangeLabel.setIcon(new ImageIcon(imgArrange));
        filterPanel.add(arrangeLabel);

        // Action cho label s·∫Øp x·∫øp 
        arrangeLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showSortMenu(evt);
            }
        });

        // ==========================T·∫°o b·∫£ng JTable ==========================
        tableModel = new DefaultTableModel();
        classTable = new JTable(tableModel);
        JScrollPane scrollPane = new JScrollPane(classTable);
        scrollPane.setBounds(20, 130, 750, 400); // ƒê·∫∑t ƒë√∫ng v·ªã tr√≠ ƒë·ªÉ kh√¥ng b·ªã ·∫©n

        // ==========================Delete Table==========================
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteClass();
            }
        });

        // ==========================Update Button==============================
        updateButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateClass();
            }
        });       
        //Action cho searchText
        searchText.getDocument().addDocumentListener(new DocumentListener() {
    @Override
    public void insertUpdate(DocumentEvent e) {
        updateTableData();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        updateTableData();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        updateTableData();
    }
});

// Kh·ªüi t·∫°o b·∫£ng v·ªõi d·ªØ li·ªáu ban ƒë·∫ßu
loadClassData(); // Thay v√¨ loadInitialData()

        // ==========================Th√™m v√†o Frame ==========================
        f.add(userpanel);
        f.add(filterPanel);
        f.add(scrollPane);

        // ==========================Load d·ªØ li·ªáu v√†o b·∫£ng ==========================
        loadClassData();

        // Hi·ªÉn th·ªã Frame
        f.setVisible(true);
    }

    private void loadClassData() {
        // L·∫•y danh s√°ch l·ªõp t·ª´ BUS
        List<ClassDTO> classList = ClassBUS.getAllClasses();

        // X√≥a d·ªØ li·ªáu c≈© trong b·∫£ng
        tableModel.setRowCount(0);

        // ƒê·∫∑t t√™n c·ªôt
        String[] columnNames = { "M√£ L·ªõp", "T√™n L·ªõp" };
        tableModel.setColumnIdentifiers(columnNames);

        // ƒê·ªï d·ªØ li·ªáu v√†o b·∫£ng
        for (ClassDTO classObj : classList) {
            Vector<Object> row = new Vector<>();
            row.add(classObj.getClassID());
            row.add(classObj.getClassName());
            tableModel.addRow(row);
        }
    }

    // =========================H√†m x√≥a=======================
    private void deleteClass() {
        int selectedRow = classTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui l√≤ng ch·ªçn l·ªõp ƒë·ªÉ x√≥a!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        String classID = tableModel.getValueAt(selectedRow, 0).toString();
        int confirm = JOptionPane.showConfirmDialog(null,
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a l·ªõp n√†y?", "X√°c nh·∫≠n x√≥a",
                JOptionPane.YES_NO_OPTION);

        if (confirm == JOptionPane.YES_OPTION) {
            boolean isDeleted = ClassBUS.deleteClass(classID);
            if (isDeleted) {
                JOptionPane.showMessageDialog(null, "X√≥a l·ªõp th√†nh c√¥ng!", "Th√¥ng b√°o",
                        JOptionPane.INFORMATION_MESSAGE);
                loadClassData();
            } else {
                JOptionPane.showMessageDialog(null, "L·ªói khi x√≥a l·ªõp!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    // =====================H√†m update=======================
    private void updateClass() {
        int selectedRow = classTable.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(null, "Vui l√≤ng ch·ªçn m·ªôt l·ªõp ƒë·ªÉ s·ª≠a.", "Th√¥ng b√°o",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        String classID = (String) tableModel.getValueAt(selectedRow, 0); // M√£ l·ªõp kh√¥ng thay ƒë·ªïi
        String oldClassName = (String) tableModel.getValueAt(selectedRow, 1);

        // Hi·ªÉn th·ªã h·ªôp tho·∫°i nh·∫≠p t√™n m·ªõi
        String newClassName = JOptionPane.showInputDialog(null, "Nh·∫≠p t√™n m·ªõi cho l·ªõp:", oldClassName);

        if (newClassName != null && !newClassName.trim().isEmpty()) {
            boolean isUpdated = ClassBUS.updateClassName(classID, newClassName.trim());
            if (isUpdated) {
                JOptionPane.showMessageDialog(null, "C·∫≠p nh·∫≠t th√†nh c√¥ng!", "Th√¥ng b√°o",
                        JOptionPane.INFORMATION_MESSAGE);
                loadClassData(); // C·∫≠p nh·∫≠t l·∫°i b·∫£ng
            } else {
                JOptionPane.showMessageDialog(null, "L·ªói khi c·∫≠p nh·∫≠t!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    //H√†m hi·ªÉn th·ªã menu sxep
    private void showSortMenu(java.awt.event.MouseEvent evt) {
        JPopupMenu sortMenu = new JPopupMenu();

        JMenuItem ascendingItem = new JMenuItem("S·∫Øp x·∫øp A - Z");
        ascendingItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTableData(true); // S·∫Øp x·∫øp tƒÉng d·∫ßn
            }
        });

        JMenuItem descendingItem = new JMenuItem("S·∫Øp x·∫øp Z - A");
        descendingItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                updateTableData(false); // S·∫Øp x·∫øp gi·∫£m d·∫ßn
            }
        });

        sortMenu.add(ascendingItem);
        sortMenu.add(descendingItem);
        
        // Hi·ªÉn th·ªã menu t·∫°i v·ªã tr√≠ c·ªßa chu·ªôt
        sortMenu.show(((ComponentEvent) evt).getComponent(), evt.getX(), evt.getY());
    }


    // ======================H√†m s·∫Øp x·∫øp=================================
    private void updateTableData(boolean ascending) {
        List<ClassDTO> sortedClasses = ClassBUS.sortClasses(ascending);
    
        tableModel.setRowCount(0);
        for (ClassDTO classObj : sortedClasses) {
            Vector<Object> row = new Vector<>();
            row.add(classObj.getClassID());
            row.add(classObj.getClassName());
            row.add(classObj.getTeacherID());
            tableModel.addRow(row);
        }
    }
    //H√†m update table
    // Thay v√¨ g·ªçi loadInitialData(), b·∫°n s·∫Ω g·ªçi loadClassData()
private void updateTableData() {
    String keyword = searchText.getText().trim();
    if (keyword.isEmpty()) {
        // N·∫øu tr∆∞·ªùng t√¨m ki·∫øm tr·ªëng, hi·ªÉn th·ªã d·ªØ li·ªáu ban ƒë·∫ßu
        loadClassData(); // G·ªçi ph∆∞∆°ng th·ª©c ƒë√£ c√≥ ƒë·ªÉ t·∫£i d·ªØ li·ªáu
    } else {
        // T√¨m ki·∫øm v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu
        ClassBUS.searchClassData(keyword, tableModel);
    }
}
    public static void main(String[] args) {
        new ClassListFrame(1);
    }
}
